name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., patch, minor, major, or specific version like 1.2.3)'
        required: true
        default: 'patch'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          pnpm build-core
          pnpm build-manifest
          pnpm build-react

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Version packages
        id: version-packages
        run: |
          echo "Versioning packages with: ${{ github.event.inputs.version }}"

          # Update package.json versions directly using node
          for package_dir in packages/*/; do
            if [[ -f "$package_dir/package.json" ]]; then
              echo "Updating version in $package_dir"
              node -e "
                const fs = require('fs');
                const path = require('path');
                const pkgPath = path.join('$package_dir', 'package.json');
                const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
                
                // Handle version input (patch/minor/major or specific version)
                const input = '${{ github.event.inputs.version }}';
                let newVersion;
                
                if (['patch', 'minor', 'major'].includes(input)) {
                  const [major, minor, patch] = pkg.version.split('.').map(Number);
                  if (input === 'patch') newVersion = \`\${major}.\${minor}.\${patch + 1}\`;
                  else if (input === 'minor') newVersion = \`\${major}.\${minor + 1}.0\`;
                  else if (input === 'major') newVersion = \`\${major + 1}.0.0\`;
                } else {
                  newVersion = input;
                }
                
                pkg.version = newVersion;
                fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
                console.log(\`Updated \${pkg.name} to \${newVersion}\`);
              "
            fi
          done

          # Get the new version from package.json after versioning
          NEW_VERSION=$(node -p "require('./packages/core/package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Commit version changes
        run: |
          git add .
          git commit -m "chore: release version v${{ steps.version-packages.outputs.version }}" || echo "No changes to commit"

      - name: Create git tag
        run: |
          VERSION="${{ steps.version-packages.outputs.version }}"

          # Check if tag already exists
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists, deleting it first"
            git tag -d "v$VERSION" || true
            git push origin --delete "v$VERSION" || true
          fi

          git tag "v$VERSION"
          echo "Created tag v$VERSION"

      - name: Push changes and tags
        run: |
          git push origin main
          git push origin --tags

      - name: Publish to npm
        run: pnpm publish -r --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version-packages.outputs.version }}
          name: Release v${{ steps.version-packages.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
